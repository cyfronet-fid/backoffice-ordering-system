/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MainImport } from './routes/_main'
import { Route as MainIndexImport } from './routes/_main/index'
import { Route as MainUsersIndexImport } from './routes/_main/users/index'
import { Route as MainProvidersIndexImport } from './routes/_main/providers/index'
import { Route as MainOrdersIndexImport } from './routes/_main/orders/index'

// Create/Update Routes

const MainRoute = MainImport.update({
  id: '/_main',
  getParentRoute: () => rootRoute,
} as any)

const MainIndexRoute = MainIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainRoute,
} as any)

const MainUsersIndexRoute = MainUsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => MainRoute,
} as any)

const MainProvidersIndexRoute = MainProvidersIndexImport.update({
  id: '/providers/',
  path: '/providers/',
  getParentRoute: () => MainRoute,
} as any)

const MainOrdersIndexRoute = MainOrdersIndexImport.update({
  id: '/orders/',
  path: '/orders/',
  getParentRoute: () => MainRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainImport
      parentRoute: typeof rootRoute
    }
    '/_main/': {
      id: '/_main/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainIndexImport
      parentRoute: typeof MainImport
    }
    '/_main/orders/': {
      id: '/_main/orders/'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof MainOrdersIndexImport
      parentRoute: typeof MainImport
    }
    '/_main/providers/': {
      id: '/_main/providers/'
      path: '/providers'
      fullPath: '/providers'
      preLoaderRoute: typeof MainProvidersIndexImport
      parentRoute: typeof MainImport
    }
    '/_main/users/': {
      id: '/_main/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof MainUsersIndexImport
      parentRoute: typeof MainImport
    }
  }
}

// Create and export the route tree

interface MainRouteChildren {
  MainIndexRoute: typeof MainIndexRoute
  MainOrdersIndexRoute: typeof MainOrdersIndexRoute
  MainProvidersIndexRoute: typeof MainProvidersIndexRoute
  MainUsersIndexRoute: typeof MainUsersIndexRoute
}

const MainRouteChildren: MainRouteChildren = {
  MainIndexRoute: MainIndexRoute,
  MainOrdersIndexRoute: MainOrdersIndexRoute,
  MainProvidersIndexRoute: MainProvidersIndexRoute,
  MainUsersIndexRoute: MainUsersIndexRoute,
}

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof MainRouteWithChildren
  '/': typeof MainIndexRoute
  '/orders': typeof MainOrdersIndexRoute
  '/providers': typeof MainProvidersIndexRoute
  '/users': typeof MainUsersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof MainIndexRoute
  '/orders': typeof MainOrdersIndexRoute
  '/providers': typeof MainProvidersIndexRoute
  '/users': typeof MainUsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_main': typeof MainRouteWithChildren
  '/_main/': typeof MainIndexRoute
  '/_main/orders/': typeof MainOrdersIndexRoute
  '/_main/providers/': typeof MainProvidersIndexRoute
  '/_main/users/': typeof MainUsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/' | '/orders' | '/providers' | '/users'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/orders' | '/providers' | '/users'
  id:
    | '__root__'
    | '/_main'
    | '/_main/'
    | '/_main/orders/'
    | '/_main/providers/'
    | '/_main/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  MainRoute: typeof MainRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  MainRoute: MainRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_main"
      ]
    },
    "/_main": {
      "filePath": "_main.tsx",
      "children": [
        "/_main/",
        "/_main/orders/",
        "/_main/providers/",
        "/_main/users/"
      ]
    },
    "/_main/": {
      "filePath": "_main/index.tsx",
      "parent": "/_main"
    },
    "/_main/orders/": {
      "filePath": "_main/orders/index.tsx",
      "parent": "/_main"
    },
    "/_main/providers/": {
      "filePath": "_main/providers/index.tsx",
      "parent": "/_main"
    },
    "/_main/users/": {
      "filePath": "_main/users/index.tsx",
      "parent": "/_main"
    }
  }
}
ROUTE_MANIFEST_END */
