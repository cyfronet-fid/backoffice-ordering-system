// This file is auto-generated by @hey-api/openapi-ts
import {
  createClient,
  createConfig,
  type Options,
} from "@hey-api/client-fetch";

import type {
  ReadOrdersData,
  ReadOrdersResponse,
  ReadUsersData,
  ReadUsersResponse,
  GetUserByIdData,
  GetUserByIdResponse,
  GetUserByIdError,
  ReadProvidersData,
  ReadProvidersResponse,
  ReadMessagesData,
  ReadMessagesResponse,
  ReadRootGetData,
  ReadRootGetResponse,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Read Orders
 */
export const readOrders = <ThrowOnError extends boolean = false>(
  options?: Options<ReadOrdersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ReadOrdersResponse,
    unknown,
    ThrowOnError
  >({
    url: "/orders/",
    ...options,
  });
};

/**
 * Read Users
 */
export const readUsers = <ThrowOnError extends boolean = false>(
  options?: Options<ReadUsersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ReadUsersResponse,
    unknown,
    ThrowOnError
  >({
    url: "/users/",
    ...options,
  });
};

/**
 * Get User By Id
 */
export const getUserById = <ThrowOnError extends boolean = false>(
  options: Options<GetUserByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetUserByIdResponse,
    GetUserByIdError,
    ThrowOnError
  >({
    url: "/users/{user_id}",
    ...options,
  });
};

/**
 * Read Providers
 */
export const readProviders = <ThrowOnError extends boolean = false>(
  options?: Options<ReadProvidersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ReadProvidersResponse,
    unknown,
    ThrowOnError
  >({
    url: "/providers/",
    ...options,
  });
};

/**
 * Read Messages
 */
export const readMessages = <ThrowOnError extends boolean = false>(
  options?: Options<ReadMessagesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ReadMessagesResponse,
    unknown,
    ThrowOnError
  >({
    url: "/messages/",
    ...options,
  });
};

/**
 * Read Root
 */
export const readRootGet = <ThrowOnError extends boolean = false>(
  options?: Options<ReadRootGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ReadRootGetResponse,
    unknown,
    ThrowOnError
  >({
    url: "/",
    ...options,
  });
};
